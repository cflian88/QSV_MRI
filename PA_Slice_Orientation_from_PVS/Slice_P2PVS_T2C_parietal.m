function Slice_P2_PVS_T2C_parietal(fo,fc,prefix,tilt_T2S,center,tilt_T2C0)
% fc: the file containing the clustered PVS masks
% fo: the file containing the orientions of PVS; generated by PVS_orient
% prefix: output file to save the results
% tilt_A2S: head tilt from axial to sagittal
% center: center of the PC slice
% initial tilt for A2C0; the final A2C will be optimized 

orient=get_orient(fc);

load(fc,'c','ind','path','voxsize');
load(fo,'norm_seg');
%%
nvox_path=cellLen(path);
sz=size(c);
thr=10;


an_os=-30:3:30; %
dist_os=-10:2:10;

nan=length(an_os);
ndist=length(dist_os);

ag=cell(nan,ndist);
nperp=zeros(nan,ndist);

ipvs=ag;
for j=1:ndist
    for i=1:nan     
         tilt_T2C=tilt_T2C0+an_os(i);
         norm = norm_SiemensScanner('T2S',tilt_T2S,'T2C',tilt_T2C);
          center2=center(:)+dist_os(j)*norm(:);
          
        [ag{i,j},ipvs{i,j}]=find_intercept(ind,nvox_path,norm_seg,center2,norm,sz,orient);
        nperp(i,j)=sum(ag{i,j}<thr);
    end
end

%% for debug
imax=max_ind(nperp);
tilt_T2C=tilt_T2C0+an_os(imax(1));
norm = norm_SiemensScanner('T2S',tilt_T2S,'T2C',tilt_T2C);
center_T2=center(:)+dist_os(imax(2))*norm;
T2=do_SliceT2_T2C_parietal(1,center_T2,norm);  %debug
o_ref=get_o_ref(norm,center_T2);    
m=find_intercept2(ind,nvox_path,o_ref,orient,sz);
m_perp=remove_tilt_pvs(m,ipvs{imax(1),imax(2)}(ag{imax(1),imax(2)}<thr));


save(prefix,'nperp','ag','ipvs','T2','m','m_perp');


function c2=find_intercept2(ind,nvox_path,o_ref,o_ind,sz)
% norm: 1*3
% norm_seg: 3*n cells
% the coordinate system assumes rotmat=eye(3) and pos =[0,0,0] for the T2
% images;


sz_interp=[512,512,1];
c2=zeros(sz_interp);


for i=1:length(ind)
    
    sub=ind2subb(sz,ind{i}(1:nvox_path(i)));
    xyz=ijk2xyz(sub,o_ind);
    res=dist2plane(xyz,o_ref.center,o_ref.rotmat(:,3));
    
    iint=find(sign(res(1:end-1)).*sign(res(2:end))<=0);
    if length(iint)>1 || isempty(iint)
        continue;
    end
    
    if abs(res(iint))<abs(res(iint+1))
        %an(count)=angle_bw_2vec(norm_seg{i}(:,iint)',norm);      
        iint2=iint;
    else
        %an(count)=angle_bw_2vec(norm_seg{i}(:,iint+1)',norm);      
        iint2=iint+1;
    end
    ijk=xyz2ijk(xyz(iint2,:),o_ref);
        
    
    c2(ijk(1),ijk(2))=i;
 %   T2b(ijk(1),c2(ijk(2)))=T2(sub(iint2,1),sub(iint2,2),sub(iint2,3));
        
end

function m=remove_tilt_pvs(m,ipvs_perp)

ipvs=unique(m(:));
ipvs(ipvs==0)=[];
ipvs(isnan(ipvs))=[];
thr=10;



ipvs_tilt=setdiff(ipvs,ipvs_perp);
for i=ipvs_tilt'
  m(m==i)=0;
end

tmp=setdiff(ipvs_perp,ipvs);
if ~isempty(tmp)
    error('this should not happen');
end

%% reslice method

function [an,ipvs,m]=find_intercept(ind,nvox_path,norm_seg,center,norm,sz,orient)
% norm: 1*3
% norm_seg: 3*n cells

an=[];
ipvs=[]; % the indices of the PVS that intercept the plane.
count=0;
m=zeros(sz);
for i=1:length(ind)    
    sub=ind2subb(sz,ind{i}(1:nvox_path(i)));
    
    xyz=ijk2xyz(sub,orient);
    res=dist2plane(xyz,center,norm);
    
    
    iint=find(sign(res(1:end-1)).*sign(res(2:end))<=0);
    if length(iint)>1 || isempty(iint)
        continue;
    end
    
    count=count+1;
    if abs(res(iint))<abs(res(iint+1))
        iint2=iint;
    else
        iint2=iint+1;      
    end
     an(count)=angle_bw_2vec(norm_seg{i}(:,iint2)',norm);      
    
    ipvs(count)=i;
    
    m(ind{i}(iint2))=i;
    
end


function T2b=do_SliceT2_T2C_parietal(i,center,norm) % for debug 


    T2=ri(sprintf('../../../T2nii/T2_PVS%02d.nii.gz',i));
    o_T2=get_orient_from_nii(sprintf('../../../T2nii/T2_PVS%02d.nii.gz',i));
     o_ref=get_o_ref(norm,center);
     
    
    
    T2b=reslice_with_orient([512,512,1],o_ref,o_T2,T2);
    

    function o_ref=get_o_ref(norm,center)
         rotmat=norm2rotmat(norm);
    
    o_ref.voxsize=[0.4,0.4,1];
    o_ref.center=center;
    
    o_ref.pos=center2pos(o_ref.voxsize,rotmat,[512,512,1],center);
    o_ref.rotmat=rotmat;
    o_ref.oreint='LPI';

function res=norm2rotmat(norm)

c=norm(:);
a=[1,0,0]';
a=a-c*sum(c.*a);
a=a/sos(a,1);
b=cross(c,a,1);
res=[a,b,c];



function res=dist2plane(v,center,norm)
% v=n*3;
% center: 1*3;
% norm=1*3

res=sum((v-center(:)').*norm(:)',2);



function [npvs,an]=check_tilt(v,norm)

sz=size(v);
[m,tmp,sub]=clusterize2(~isnan(v(:,:,:,1)));
v2=reshape(v,[prod(sz(1:3)),3]);

npvs=length(sub);
an=zeros(1,npvs);
for i=1:npvs
   ind=sub2indb(size(v(:,:,:,1)),sub{i});
   an(i)=angle_bw_2vec(norm,mean(v2(ind,:),1));   
end


     
      
function [xx,yy,zz]=get_grid(sz,voxsize,rotmat,pos)
        
if length(sz)==2
    sz(3)=1;
end


%[x,y,z]=meshgrid((0:sz(2)-1)*voxsize(2),(0:sz(1)-1)*voxsize(1),(0:sz(3)-1)*voxsize(3));


[x,y,z]=meshgrid((0:sz(2)-1)*voxsize(2),(0:sz(1)-1)*voxsize(1),(0:sz(3)-1)*voxsize(3));

%%
yxz=cat(4,y,x,z);
rotmat=reshape(rotmat',[1,1,1,3,3]);
yxz=sum(rotmat.*yxz,4);

%%


% x=rotmat**vox(1);  %pos for the original data
% y=get_vec(size(v,2))*vox(2);
% z=get_vec(size(v,3))*vox(3);
yy=yxz(:,:,:,1,1)+pos(1);
xx=yxz(:,:,:,1,2)+pos(2);
zz=yxz(:,:,:,1,3)+pos(3);




