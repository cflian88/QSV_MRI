function Slice_P2_PVS(fo,fc,prefix)
% fc: the file containing the clustered PVS masks
% fo: the file containing the orientions of PVS; generated by PVS_orient
% prefix: output file to save the results
% the function calculate the pvs id's angles, and number of almost
% perpendicular PVS's for a plane that is perpendicular to and going through
% 1/4, 2/4, and 3/4 of the PVS path.

orient=get_orient(fc);

load(fc,'c','ind','path','voxsize');
load(fo,'norm_seg');
%%
nvox_path=cellLen(path);
sz=size(c);
thr=10;
ag=cell(3,length(nvox_path));
nperp=zeros(3,length(nvox_path));
ipvs=ag;

for i=1:length(nvox_path)
    if mod(i,20)==0
        disp([isub,i,length(nvox_path)]);
    end
    for j=1:3
        ii=ceil(nvox_path(i)*j/4);
        
        norm=norm_seg{i}(:,ii)';
        
        xyz=ijk2xyz(ind2subb(sz,ind{i}(ii)),orient);
        
        [ag{j,i},ipvs{j,i}]=find_intercept(ind,nvox_path,norm_seg,xyz,norm,sz,orient);
        nperp(j,i)=sum(ag{j,i}<thr);
    end
end

save(prefix,'nperp','ag','ipvs');


%% reslice method

function [an,ipvs]=find_intercept(ind,nvox_path,norm_seg,center,norm,sz,orient)
% norm: 1*3
% norm_seg: 3*n cells

an=[];
ipvs=[]; % the indices of the PVS that intercept the plane.
count=0;
for i=1:length(ind)    
    sub=ind2subb(sz,ind{i}(1:nvox_path(i)));
    
    xyz=ijk2xyz(sub,orient);
    res=dist2plane(xyz,center,norm);
    
    
    iint=find(sign(res(1:end-1)).*sign(res(2:end))<=0);
    if length(iint)>1 || isempty(iint)
        continue;
    end
    
    count=count+1;
    if abs(res(iint))<abs(res(iint+1))
        an(count)=angle_bw_2vec(norm_seg{i}(:,iint)',norm);      
    else
        an(count)=angle_bw_2vec(norm_seg{i}(:,iint+1)',norm);      
    end
    ipvs(count)=i;    
end






function temp_save
center=[-4.65,38.01,18.66];

al=pi/6;
norm=[0,cos(al),sin(al)];

% do it with reslice method
method='nearest';

sz_ref=[512,512,1];
o_ref.voxsize=[0.4,0.4,2];

o_ref.rotmat=norm2rotmat(norm);
o_ref.center=center;
o_ref.pos=center2pos([0.4,0.4,2],o_ref.rotmat,sz_ref,center);
o_in=get_orient(fo);

[xx2,yy2,zz2]=get_grid(size(cnorm_seg),o_in.voxsize,eye(3),o_in.rotmat'*o_in.pos);
[xx,yy,zz]=get_grid(sz_ref,o_ref.voxsize,o_in.rotmat'*o_ref.rotmat,o_in.rotmat'*o_ref.pos);


for i=1:size(cnorm_seg,4)
 v(:,:,:,i) = interp3(xx2,yy2,zz2,cnorm_seg(:,:,:,i),xx,yy,zz,method);
end

T2_reslice= interp3(xx2,yy2,zz2,T2,xx,yy,zz,method);


[npvs,an]=check_tilt(v,norm);


function res=dist2plane(v,center,norm)
% v=n*3;
% center: 1*3;
% norm=1*3

res=sum((v-center).*norm,2);



function [npvs,an]=check_tilt(v,norm)

sz=size(v);
[m,tmp,sub]=clusterize2(~isnan(v(:,:,:,1)));
v2=reshape(v,[prod(sz(1:3)),3]);

npvs=length(sub);
an=zeros(1,npvs);
for i=1:npvs
   ind=sub2indb(size(v(:,:,:,1)),sub{i});
   an(i)=angle_bw_2vec(norm,mean(v2(ind,:),1));   
end


     
      
function [xx,yy,zz]=get_grid(sz,voxsize,rotmat,pos)
        
if length(sz)==2
    sz(3)=1;
end


%[x,y,z]=meshgrid((0:sz(2)-1)*voxsize(2),(0:sz(1)-1)*voxsize(1),(0:sz(3)-1)*voxsize(3));


[x,y,z]=meshgrid((0:sz(2)-1)*voxsize(2),(0:sz(1)-1)*voxsize(1),(0:sz(3)-1)*voxsize(3));

%%
yxz=cat(4,y,x,z);
rotmat=reshape(rotmat',[1,1,1,3,3]);
yxz=sum(rotmat.*yxz,4);

%%


% x=rotmat**vox(1);  %pos for the original data
% y=get_vec(size(v,2))*vox(2);
% z=get_vec(size(v,3))*vox(3);
yy=yxz(:,:,:,1,1)+pos(1);
xx=yxz(:,:,:,1,2)+pos(2);
zz=yxz(:,:,:,1,3)+pos(3);




function res=norm2rotmat(norm)


c=norm(:);
a=[1,0,0]';
a=a-c*sum(c.*a);
a=a/sos(a,1);
b=cross(c,a,1);
res=[a,b,c];

